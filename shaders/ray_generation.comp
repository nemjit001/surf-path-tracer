#version 450
#pragma shader_stage(compute)

#include "wavefront_common.glsl"

layout(set = 0, binding = 0) uniform CameraData
{
	vec3 position;
	vec3 up;
	vec3 fwd;
	vec3 right;
	vec3 firstPixel;
	vec3 uVector;
	vec3 vVector;
	vec2 resolution;
	float focalLength;
	float defocusAngle;
} camera;

layout(set = 0, binding = 1) uniform FrameState
{
	uint samplesPerFrame;
	uint totalSamples;
} frameState;

layout(set = 1, binding = 0) coherent buffer RayCounters 	{ uint rayIn; uint rayOut; } rayCounters;
layout(set = 1, binding = 1) coherent buffer RayInBuffer 	{ Ray rays[]; } rayIn;
layout(set = 1, binding = 2) coherent buffer RayOutBuffer 	{ Ray rays[]; } rayOut;

layout(local_size_x = 32, local_size_y = 32) in;

void main()
{
	// TODO: generate ray per pixel per sample for ray buffer
}
