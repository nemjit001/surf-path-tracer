#version 450
#pragma shader_stage(compute)

#include "wavefront_common.glsl"

layout(set = 0, binding = 0) uniform CameraData
{
	vec3 position;
	vec3 firstPixel;
	vec3 uVector;
	vec3 vVector;
	vec2 resolution;
} camera;

layout(set = 1, binding = 0) buffer RayBuffer
{
	uint counter;
	Ray rays[];
} rayBuffer;

layout(local_size_x = 16, local_size_y = 16) in;

void main()
{
	uint xPixel = gl_LocalInvocationID.x + (gl_WorkGroupID.x * gl_WorkGroupSize.x);
	uint yPixel = gl_LocalInvocationID.y + (gl_WorkGroupID.y * gl_WorkGroupSize.y);
	uint pixelIdx = xPixel + (yPixel * (gl_NumWorkGroups.x * gl_WorkGroupSize.x));

	float u = xPixel / camera.resolution.x;
	float v = yPixel / camera.resolution.y;

	vec3 origin = camera.position;
	vec3 planePos = camera.firstPixel + u * camera.uVector + v * camera.vVector;
	vec3 direction = normalize(planePos - origin);

	rayBuffer.rays[atomicAdd(rayBuffer.counter, 1)] = Ray(
		origin,
		direction,
		F32_FAR_AWAY,
		pixelIdx,
		UNSET_IDX,
		UNSET_IDX,
		vec2(0, 0)
	);
}
