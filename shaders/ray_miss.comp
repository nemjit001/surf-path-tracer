#version 450
#pragma shader_stage(compute)

#include "wavefront_common.glsl"

layout(set = 0, binding = 2) buffer AccumulatorBuffer
{
	vec4 accumulator[];
};

layout(set = 1, binding = 2) buffer MissRayBuffer
{
	int counter;
	Ray rays[];
} rayBuffer;

layout(local_size_x = 32, local_size_y = 32) in;

void main()
{
	// Claim processing IDX
	int idx = atomicAdd(rayBuffer.counter, -1) - 1;
	if (idx < 0)
	{
		atomicExchange(rayBuffer.counter, 0); // reset counter to 0 -> nice for cleanup, no need to reset on host side
		return; // invalid IDX requested
	}

	Ray ray = rayBuffer.rays[idx];
	accumulator[ray.pixelIdx] += vec4(0.5 * (vec3(1) + ray.direction), 1);
}
