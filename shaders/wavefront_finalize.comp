#version 450
#pragma shader_stage(compute)

layout(set = 0, binding = 1) uniform FrameState
{
	uint samplesPerFrame;
	uint totalSamples;
} frameState;

layout(set = 0, binding = 2) buffer AccumulatorBuffer
{
	vec4 accumulator[];
};

layout(set = 0, binding = 3, rgba8) uniform image2D outputImage;

layout(local_size_x = 16, local_size_y = 16) in;

void main()
{
	uvec3 pixelOffset = gl_WorkGroupID * gl_WorkGroupSize;
	uvec3 totalInvocations = gl_NumWorkGroups * gl_WorkGroupSize;
	uint xPixel = gl_LocalInvocationID.x + pixelOffset.x;
	uint yPixel = gl_LocalInvocationID.y + pixelOffset.y;
	uint pixelIdx = xPixel + (yPixel * totalInvocations.x);

	float invSamples = 1.0 / frameState.totalSamples;
	imageStore(
		outputImage,
		ivec2(xPixel, yPixel),
		accumulator[pixelIdx] * invSamples
	);
}
