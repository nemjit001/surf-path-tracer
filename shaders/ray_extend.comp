#version 450
#pragma shader_stage(compute)

#include "bvh.glsl"
#include "wavefront_common.glsl"

#define TLAS_ROOT_IDX			0
#define TRAVERSAL_STACK_SIZE 	64

layout(set = 0, binding = 2) buffer AccumulatorBuffer	{ vec4 accumulator[]; };

layout(set = 1, binding = 0) coherent buffer RayCounters 		{ int rayIn; int rayOut; } rayCounters;
layout(set = 1, binding = 1) coherent buffer RayInBuffer 		{ Ray rays[]; } rayIn;
layout(set = 1, binding = 5) coherent buffer MatEvalRayBuffer 	{ int counter; Ray rays[]; } matEvalRays;

layout(set = 2, binding = 0) readonly uniform SceneData 		{ SceneBackground background; } sceneData;
layout(set = 2, binding = 1) readonly buffer TriBuffer 			{ Triangle triangles[]; };
layout(set = 2, binding = 3) readonly buffer BLASIndexBuffer 	{ uint blasIndices[]; };
layout(set = 2, binding = 4) readonly buffer BLASNodeBuffer 	{ BvhNode blasNodes[]; };
layout(set = 2, binding = 6) readonly buffer InstanceBuffer 	{ Instance instances[]; };
layout(set = 2, binding = 7) readonly buffer TLASIndexBuffer 	{ uint tlasIndices[]; };
layout(set = 2, binding = 8) readonly buffer TLASNodeBuffer 	{ BvhNode tlasNodes[]; };

layout(local_size_x = 32) in;

bool intersectBLAS(Instance instance, inout Ray ray)
{
	BvhNode node = blasNodes[instance.nodeOffset];
	uint stack[TRAVERSAL_STACK_SIZE];
	uint stackptr = 0;
	bool intersected = false;

	while(true)
	{
		if (bvhNodeIsLeaf(node))
		{
			for (uint i = 0; i < node.count; i++)
			{
				uint primIdx = blasIndices[instance.idxOffset + node.leftFirst + i];
				if (triangleIntersect(triangles[instance.triOffset + primIdx], ray))
				{
					ray.hit.primitiveIdx = primIdx;
					intersected = true;
				}
			}

			if (stackptr == 0)
				break;

			node = blasNodes[stack[stackptr - 1]];
			stackptr--;
			continue;
		}

		uint childNearIdx = instance.nodeOffset + node.leftFirst;
		uint childFarIdx = childNearIdx + 1;
		float distNear = aabbIntersect(blasNodes[childNearIdx], ray);
		float distFar = aabbIntersect(blasNodes[childFarIdx], ray);

		if (distNear > distFar)
		{
			uint ti = childNearIdx; childNearIdx = childFarIdx; childFarIdx = ti;
			float td = distNear; distNear = distFar; distFar = td;
		}

		if (distNear == F32_FAR_AWAY)
		{
			if (stackptr == 0)
				break;
			
			node = blasNodes[stack[stackptr - 1]];
			stackptr--;
		}
		else
		{
			node = blasNodes[childNearIdx];
			if (distFar != F32_FAR_AWAY)
			{
				stack[stackptr] = childFarIdx;
				stackptr++;
			}
		}
	}

	return intersected;
}

bool intersectInstance(Instance instance, inout Ray ray)
{
	Ray oldRay = ray;

	vec4 tPos = instance.invTransform * vec4(ray.origin, 1);
	vec4 tDir = instance.invTransform * vec4(ray.direction, 0);

	ray.origin = tPos.xyz / tPos.w;
	ray.direction = tDir.xyz;

	bool intersected = intersectBLAS(instance, ray);
	ray.origin = oldRay.origin;
	ray.direction = oldRay.direction;

	return intersected;
}

bool intersectTLAS(inout Ray ray)
{
	BvhNode node = tlasNodes[TLAS_ROOT_IDX];
	uint stack[TRAVERSAL_STACK_SIZE];
	uint stackptr = 0;
	bool intersected = false;

	while(true)
	{
		if (bvhNodeIsLeaf(node))
		{
			for (uint i = 0; i < node.count; i++)
			{
				uint instanceIdx = tlasIndices[node.leftFirst + i];
				if (intersectInstance(instances[instanceIdx], ray))
				{
					ray.hit.instanceIdx = instanceIdx;
					intersected = true;
				}
			}

			if (stackptr == 0)
				break;

			node = tlasNodes[stack[stackptr - 1]];
			stackptr--;
			continue;
		}

		uint childNearIdx = node.leftFirst;
		uint childFarIdx = childNearIdx + 1;
		float distNear = aabbIntersect(tlasNodes[childNearIdx], ray);
		float distFar = aabbIntersect(tlasNodes[childFarIdx], ray);

		if (distNear > distFar)
		{
			uint ti = childNearIdx; childNearIdx = childFarIdx; childFarIdx = ti;
			float td = distNear; distNear = distFar; distFar = td;
		}

		if (distNear == F32_FAR_AWAY)
		{
			if (stackptr == 0)
				break;
			
			node = tlasNodes[stack[stackptr - 1]];
			stackptr--;
		}
		else
		{
			node = tlasNodes[childNearIdx];
			if (distFar != F32_FAR_AWAY)
			{
				stack[stackptr] = childFarIdx;
				stackptr++;
			}
		}
	}

	return intersected;
}

void main()
{
	int rayIdx = atomicAdd(rayCounters.rayIn, -1) - 1;
	if (rayIdx < 0)
	{
		atomicMax(rayCounters.rayIn, 0);
		return;
	}

	Ray ray = rayIn.rays[rayIdx];
	if (!intersectTLAS(ray))
	{
		ray.energy += ray.transmission * sampleSkyColor(ray, sceneData.background);
		accumulator[ray.state.pixelIdx] += vec4(ray.energy, 1);
		return;
	}

	matEvalRays.rays[atomicAdd(matEvalRays.counter, 1)] = ray;
}
