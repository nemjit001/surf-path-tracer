#version 450
#pragma shader_stage(compute)

#include "wavefront_common.glsl"

layout(set = 1, binding = 0) buffer RayBuffer
{
	int counter;
	Ray rays[];
} rayBuffer;

layout(set = 1, binding = 1) buffer HitRayBuffer
{
	int counter;
	Ray rays[];
} hitBuffer;

layout(set = 1, binding = 2) buffer MissRayBuffer
{
	int counter;
	Ray rays[];
} missBuffer;

layout(local_size_x = 32, local_size_y = 32) in;

void main()
{
	// Claim processing IDX
	int idx = atomicAdd(rayBuffer.counter, -1) - 1;
	if (idx < 0)
	{
		atomicExchange(rayBuffer.counter, 0); // reset counter to 0 -> nice for cleanup, no need to reset on host side
		return; // invalid IDX requested
	}

	Ray ray = rayBuffer.rays[idx];
	// Don't do anything yet (everything misses) -> check for hit or miss using sphere funcs
	missBuffer.rays[atomicAdd(missBuffer.counter, 1)] = ray;
}
